{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VISHWAS\\\\Desktop\\\\React-me\\\\stream\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      console.log({\n        meta\n      });\n      const className = `field ${meta.error && meta.touched ? 'error' : ''} `;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      console.log(formValues);\n      this.props.createStream(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui error message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 21\n        }\n      }, error));\n    }\n  }\n\n  render() {\n    //handlesubmit is a part of reduxForm\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n  if (!formValues.title) errors.title = 'You must enter a title';\n  if (!formValues.description) errors.description = 'You must enter a description';\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["C:/Users/VISHWAS/Desktop/React-me/stream/client/src/components/streams/StreamCreate.js"],"names":["React","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","console","log","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","formWrapped","reduxForm","form"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStream } from '../../actions';\r\n\r\nclass StreamCreate extends React.Component {\r\n\r\n    renderError({error, touched}){\r\n        if(touched && error){\r\n            return (\r\n                <div className=\"ui error message\">\r\n                    <div className=\"header\">{error}</div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderInput= ({ input, label, meta })=>{\r\n        console.log({meta});\r\n        const className= `field ${meta.error && meta.touched?'error':''} `\r\n        return (\r\n            <div className={className}>\r\n                <label>{label}</label>\r\n                <input {...input} autoComplete=\"off\"/>\r\n                {this.renderError(meta)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onSubmit= (formValues) => {\r\n        console.log(formValues);\r\n        this.props.createStream(formValues);\r\n    }\r\n\r\n    render() {\r\n        //handlesubmit is a part of reduxForm\r\n        return (\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\r\n                <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\r\n                <Field name=\"description\" component={this.renderInput} label=\"Enter Description\" />\r\n                <button className=\"ui button primary\">Submit</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst validate= (formValues) => {\r\n    const errors= {};\r\n    if(!formValues.title)\r\n        errors.title= 'You must enter a title';\r\n\r\n    if(!formValues.description)\r\n        errors.description= 'You must enter a description';\r\n\r\n    return errors;\r\n}\r\n\r\nconst formWrapped= reduxForm({\r\n    form: 'streamCreate',\r\n    validate: validate\r\n})(StreamCreate);\r\n\r\nexport default connect(null,{createStream}) (formWrapped);"]},"metadata":{},"sourceType":"module"}